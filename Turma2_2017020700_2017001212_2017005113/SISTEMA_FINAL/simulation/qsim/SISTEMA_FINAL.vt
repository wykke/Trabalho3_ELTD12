// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/02/2018 00:05:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SISTEMA_FINAL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SISTEMA_FINAL_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SISTEMA_FINAL_vlg_check_tst (
	SaidaAlu,
	contador,
	ffald,
	saida,
	saidaResto,
	sampler_rx
);
input [15:0] SaidaAlu;
input [7:0] contador;
input [15:0] ffald;
input [15:0] saida;
input [15:0] saidaResto;
input sampler_rx;

reg [15:0] SaidaAlu_expected;
reg [7:0] contador_expected;
reg [15:0] ffald_expected;
reg [15:0] saida_expected;
reg [15:0] saidaResto_expected;

reg [15:0] SaidaAlu_prev;
reg [7:0] contador_prev;
reg [15:0] ffald_prev;
reg [15:0] saida_prev;
reg [15:0] saidaResto_prev;

reg [15:0] SaidaAlu_expected_prev;
reg [7:0] contador_expected_prev;
reg [15:0] ffald_expected_prev;
reg [15:0] saida_expected_prev;
reg [15:0] saidaResto_expected_prev;

reg [15:0] last_SaidaAlu_exp;
reg [7:0] last_contador_exp;
reg [15:0] last_ffald_exp;
reg [15:0] last_saida_exp;
reg [15:0] last_saidaResto_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	SaidaAlu_prev = SaidaAlu;
	contador_prev = contador;
	ffald_prev = ffald;
	saida_prev = saida;
	saidaResto_prev = saidaResto;
end

// update expected /o prevs

always @(trigger)
begin
	SaidaAlu_expected_prev = SaidaAlu_expected;
	contador_expected_prev = contador_expected;
	ffald_expected_prev = ffald_expected;
	saida_expected_prev = saida_expected;
	saidaResto_expected_prev = saidaResto_expected;
end


// expected saida[ 15 ]
initial
begin
	saida_expected[15] = 1'bX;
end 
// expected saida[ 14 ]
initial
begin
	saida_expected[14] = 1'bX;
end 
// expected saida[ 13 ]
initial
begin
	saida_expected[13] = 1'bX;
end 
// expected saida[ 12 ]
initial
begin
	saida_expected[12] = 1'bX;
end 
// expected saida[ 11 ]
initial
begin
	saida_expected[11] = 1'bX;
end 
// expected saida[ 10 ]
initial
begin
	saida_expected[10] = 1'bX;
end 
// expected saida[ 9 ]
initial
begin
	saida_expected[9] = 1'bX;
end 
// expected saida[ 8 ]
initial
begin
	saida_expected[8] = 1'bX;
end 
// expected saida[ 7 ]
initial
begin
	saida_expected[7] = 1'bX;
end 
// expected saida[ 6 ]
initial
begin
	saida_expected[6] = 1'bX;
end 
// expected saida[ 5 ]
initial
begin
	saida_expected[5] = 1'bX;
end 
// expected saida[ 4 ]
initial
begin
	saida_expected[4] = 1'bX;
end 
// expected saida[ 3 ]
initial
begin
	saida_expected[3] = 1'bX;
end 
// expected saida[ 2 ]
initial
begin
	saida_expected[2] = 1'bX;
end 
// expected saida[ 1 ]
initial
begin
	saida_expected[1] = 1'bX;
end 
// expected saida[ 0 ]
initial
begin
	saida_expected[0] = 1'bX;
end 
// expected saidaResto[ 15 ]
initial
begin
	saidaResto_expected[15] = 1'bX;
end 
// expected saidaResto[ 14 ]
initial
begin
	saidaResto_expected[14] = 1'bX;
end 
// expected saidaResto[ 13 ]
initial
begin
	saidaResto_expected[13] = 1'bX;
end 
// expected saidaResto[ 12 ]
initial
begin
	saidaResto_expected[12] = 1'bX;
end 
// expected saidaResto[ 11 ]
initial
begin
	saidaResto_expected[11] = 1'bX;
end 
// expected saidaResto[ 10 ]
initial
begin
	saidaResto_expected[10] = 1'bX;
end 
// expected saidaResto[ 9 ]
initial
begin
	saidaResto_expected[9] = 1'bX;
end 
// expected saidaResto[ 8 ]
initial
begin
	saidaResto_expected[8] = 1'bX;
end 
// expected saidaResto[ 7 ]
initial
begin
	saidaResto_expected[7] = 1'bX;
end 
// expected saidaResto[ 6 ]
initial
begin
	saidaResto_expected[6] = 1'bX;
end 
// expected saidaResto[ 5 ]
initial
begin
	saidaResto_expected[5] = 1'bX;
end 
// expected saidaResto[ 4 ]
initial
begin
	saidaResto_expected[4] = 1'bX;
end 
// expected saidaResto[ 3 ]
initial
begin
	saidaResto_expected[3] = 1'bX;
end 
// expected saidaResto[ 2 ]
initial
begin
	saidaResto_expected[2] = 1'bX;
end 
// expected saidaResto[ 1 ]
initial
begin
	saidaResto_expected[1] = 1'bX;
end 
// expected saidaResto[ 0 ]
initial
begin
	saidaResto_expected[0] = 1'bX;
end 
// expected contador[ 7 ]
initial
begin
	contador_expected[7] = 1'bX;
end 
// expected contador[ 6 ]
initial
begin
	contador_expected[6] = 1'bX;
end 
// expected contador[ 5 ]
initial
begin
	contador_expected[5] = 1'bX;
end 
// expected contador[ 4 ]
initial
begin
	contador_expected[4] = 1'bX;
end 
// expected contador[ 3 ]
initial
begin
	contador_expected[3] = 1'bX;
end 
// expected contador[ 2 ]
initial
begin
	contador_expected[2] = 1'bX;
end 
// expected contador[ 1 ]
initial
begin
	contador_expected[1] = 1'bX;
end 
// expected contador[ 0 ]
initial
begin
	contador_expected[0] = 1'bX;
end 
// expected SaidaAlu[ 15 ]
initial
begin
	SaidaAlu_expected[15] = 1'bX;
end 
// expected SaidaAlu[ 14 ]
initial
begin
	SaidaAlu_expected[14] = 1'bX;
end 
// expected SaidaAlu[ 13 ]
initial
begin
	SaidaAlu_expected[13] = 1'bX;
end 
// expected SaidaAlu[ 12 ]
initial
begin
	SaidaAlu_expected[12] = 1'bX;
end 
// expected SaidaAlu[ 11 ]
initial
begin
	SaidaAlu_expected[11] = 1'bX;
end 
// expected SaidaAlu[ 10 ]
initial
begin
	SaidaAlu_expected[10] = 1'bX;
end 
// expected SaidaAlu[ 9 ]
initial
begin
	SaidaAlu_expected[9] = 1'bX;
end 
// expected SaidaAlu[ 8 ]
initial
begin
	SaidaAlu_expected[8] = 1'bX;
end 
// expected SaidaAlu[ 7 ]
initial
begin
	SaidaAlu_expected[7] = 1'bX;
end 
// expected SaidaAlu[ 6 ]
initial
begin
	SaidaAlu_expected[6] = 1'bX;
end 
// expected SaidaAlu[ 5 ]
initial
begin
	SaidaAlu_expected[5] = 1'bX;
end 
// expected SaidaAlu[ 4 ]
initial
begin
	SaidaAlu_expected[4] = 1'bX;
end 
// expected SaidaAlu[ 3 ]
initial
begin
	SaidaAlu_expected[3] = 1'bX;
end 
// expected SaidaAlu[ 2 ]
initial
begin
	SaidaAlu_expected[2] = 1'bX;
end 
// expected SaidaAlu[ 1 ]
initial
begin
	SaidaAlu_expected[1] = 1'bX;
end 
// expected SaidaAlu[ 0 ]
initial
begin
	SaidaAlu_expected[0] = 1'bX;
end 
// expected ffald[ 15 ]
initial
begin
	ffald_expected[15] = 1'bX;
end 
// expected ffald[ 14 ]
initial
begin
	ffald_expected[14] = 1'bX;
end 
// expected ffald[ 13 ]
initial
begin
	ffald_expected[13] = 1'bX;
end 
// expected ffald[ 12 ]
initial
begin
	ffald_expected[12] = 1'bX;
end 
// expected ffald[ 11 ]
initial
begin
	ffald_expected[11] = 1'bX;
end 
// expected ffald[ 10 ]
initial
begin
	ffald_expected[10] = 1'bX;
end 
// expected ffald[ 9 ]
initial
begin
	ffald_expected[9] = 1'bX;
end 
// expected ffald[ 8 ]
initial
begin
	ffald_expected[8] = 1'bX;
end 
// expected ffald[ 7 ]
initial
begin
	ffald_expected[7] = 1'bX;
end 
// expected ffald[ 6 ]
initial
begin
	ffald_expected[6] = 1'bX;
end 
// expected ffald[ 5 ]
initial
begin
	ffald_expected[5] = 1'bX;
end 
// expected ffald[ 4 ]
initial
begin
	ffald_expected[4] = 1'bX;
end 
// expected ffald[ 3 ]
initial
begin
	ffald_expected[3] = 1'bX;
end 
// expected ffald[ 2 ]
initial
begin
	ffald_expected[2] = 1'bX;
end 
// expected ffald[ 1 ]
initial
begin
	ffald_expected[1] = 1'bX;
end 
// expected ffald[ 0 ]
initial
begin
	ffald_expected[0] = 1'bX;
end 
// generate trigger
always @(SaidaAlu_expected or SaidaAlu or contador_expected or contador or ffald_expected or ffald or saida_expected or saida or saidaResto_expected or saidaResto)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected SaidaAlu = %b | expected contador = %b | expected ffald = %b | expected saida = %b | expected saidaResto = %b | ",SaidaAlu_expected_prev,contador_expected_prev,ffald_expected_prev,saida_expected_prev,saidaResto_expected_prev);
	$display("| real SaidaAlu = %b | real contador = %b | real ffald = %b | real saida = %b | real saidaResto = %b | ",SaidaAlu_prev,contador_prev,ffald_prev,saida_prev,saidaResto_prev);
`endif
	if (
		( SaidaAlu_expected_prev[0] !== 1'bx ) && ( SaidaAlu_prev[0] !== SaidaAlu_expected_prev[0] )
		&& ((SaidaAlu_expected_prev[0] !== last_SaidaAlu_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[0] = SaidaAlu_expected_prev[0];
	end
	if (
		( SaidaAlu_expected_prev[1] !== 1'bx ) && ( SaidaAlu_prev[1] !== SaidaAlu_expected_prev[1] )
		&& ((SaidaAlu_expected_prev[1] !== last_SaidaAlu_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[1] = SaidaAlu_expected_prev[1];
	end
	if (
		( SaidaAlu_expected_prev[2] !== 1'bx ) && ( SaidaAlu_prev[2] !== SaidaAlu_expected_prev[2] )
		&& ((SaidaAlu_expected_prev[2] !== last_SaidaAlu_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[2] = SaidaAlu_expected_prev[2];
	end
	if (
		( SaidaAlu_expected_prev[3] !== 1'bx ) && ( SaidaAlu_prev[3] !== SaidaAlu_expected_prev[3] )
		&& ((SaidaAlu_expected_prev[3] !== last_SaidaAlu_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[3] = SaidaAlu_expected_prev[3];
	end
	if (
		( SaidaAlu_expected_prev[4] !== 1'bx ) && ( SaidaAlu_prev[4] !== SaidaAlu_expected_prev[4] )
		&& ((SaidaAlu_expected_prev[4] !== last_SaidaAlu_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[4] = SaidaAlu_expected_prev[4];
	end
	if (
		( SaidaAlu_expected_prev[5] !== 1'bx ) && ( SaidaAlu_prev[5] !== SaidaAlu_expected_prev[5] )
		&& ((SaidaAlu_expected_prev[5] !== last_SaidaAlu_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[5] = SaidaAlu_expected_prev[5];
	end
	if (
		( SaidaAlu_expected_prev[6] !== 1'bx ) && ( SaidaAlu_prev[6] !== SaidaAlu_expected_prev[6] )
		&& ((SaidaAlu_expected_prev[6] !== last_SaidaAlu_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[6] = SaidaAlu_expected_prev[6];
	end
	if (
		( SaidaAlu_expected_prev[7] !== 1'bx ) && ( SaidaAlu_prev[7] !== SaidaAlu_expected_prev[7] )
		&& ((SaidaAlu_expected_prev[7] !== last_SaidaAlu_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[7] = SaidaAlu_expected_prev[7];
	end
	if (
		( SaidaAlu_expected_prev[8] !== 1'bx ) && ( SaidaAlu_prev[8] !== SaidaAlu_expected_prev[8] )
		&& ((SaidaAlu_expected_prev[8] !== last_SaidaAlu_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[8] = SaidaAlu_expected_prev[8];
	end
	if (
		( SaidaAlu_expected_prev[9] !== 1'bx ) && ( SaidaAlu_prev[9] !== SaidaAlu_expected_prev[9] )
		&& ((SaidaAlu_expected_prev[9] !== last_SaidaAlu_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[9] = SaidaAlu_expected_prev[9];
	end
	if (
		( SaidaAlu_expected_prev[10] !== 1'bx ) && ( SaidaAlu_prev[10] !== SaidaAlu_expected_prev[10] )
		&& ((SaidaAlu_expected_prev[10] !== last_SaidaAlu_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[10] = SaidaAlu_expected_prev[10];
	end
	if (
		( SaidaAlu_expected_prev[11] !== 1'bx ) && ( SaidaAlu_prev[11] !== SaidaAlu_expected_prev[11] )
		&& ((SaidaAlu_expected_prev[11] !== last_SaidaAlu_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[11] = SaidaAlu_expected_prev[11];
	end
	if (
		( SaidaAlu_expected_prev[12] !== 1'bx ) && ( SaidaAlu_prev[12] !== SaidaAlu_expected_prev[12] )
		&& ((SaidaAlu_expected_prev[12] !== last_SaidaAlu_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[12] = SaidaAlu_expected_prev[12];
	end
	if (
		( SaidaAlu_expected_prev[13] !== 1'bx ) && ( SaidaAlu_prev[13] !== SaidaAlu_expected_prev[13] )
		&& ((SaidaAlu_expected_prev[13] !== last_SaidaAlu_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[13] = SaidaAlu_expected_prev[13];
	end
	if (
		( SaidaAlu_expected_prev[14] !== 1'bx ) && ( SaidaAlu_prev[14] !== SaidaAlu_expected_prev[14] )
		&& ((SaidaAlu_expected_prev[14] !== last_SaidaAlu_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[14] = SaidaAlu_expected_prev[14];
	end
	if (
		( SaidaAlu_expected_prev[15] !== 1'bx ) && ( SaidaAlu_prev[15] !== SaidaAlu_expected_prev[15] )
		&& ((SaidaAlu_expected_prev[15] !== last_SaidaAlu_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SaidaAlu[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SaidaAlu_expected_prev);
		$display ("     Real value = %b", SaidaAlu_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_SaidaAlu_exp[15] = SaidaAlu_expected_prev[15];
	end
	if (
		( contador_expected_prev[0] !== 1'bx ) && ( contador_prev[0] !== contador_expected_prev[0] )
		&& ((contador_expected_prev[0] !== last_contador_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[0] = contador_expected_prev[0];
	end
	if (
		( contador_expected_prev[1] !== 1'bx ) && ( contador_prev[1] !== contador_expected_prev[1] )
		&& ((contador_expected_prev[1] !== last_contador_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[1] = contador_expected_prev[1];
	end
	if (
		( contador_expected_prev[2] !== 1'bx ) && ( contador_prev[2] !== contador_expected_prev[2] )
		&& ((contador_expected_prev[2] !== last_contador_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[2] = contador_expected_prev[2];
	end
	if (
		( contador_expected_prev[3] !== 1'bx ) && ( contador_prev[3] !== contador_expected_prev[3] )
		&& ((contador_expected_prev[3] !== last_contador_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[3] = contador_expected_prev[3];
	end
	if (
		( contador_expected_prev[4] !== 1'bx ) && ( contador_prev[4] !== contador_expected_prev[4] )
		&& ((contador_expected_prev[4] !== last_contador_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[4] = contador_expected_prev[4];
	end
	if (
		( contador_expected_prev[5] !== 1'bx ) && ( contador_prev[5] !== contador_expected_prev[5] )
		&& ((contador_expected_prev[5] !== last_contador_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[5] = contador_expected_prev[5];
	end
	if (
		( contador_expected_prev[6] !== 1'bx ) && ( contador_prev[6] !== contador_expected_prev[6] )
		&& ((contador_expected_prev[6] !== last_contador_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[6] = contador_expected_prev[6];
	end
	if (
		( contador_expected_prev[7] !== 1'bx ) && ( contador_prev[7] !== contador_expected_prev[7] )
		&& ((contador_expected_prev[7] !== last_contador_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port contador[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", contador_expected_prev);
		$display ("     Real value = %b", contador_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_contador_exp[7] = contador_expected_prev[7];
	end
	if (
		( ffald_expected_prev[0] !== 1'bx ) && ( ffald_prev[0] !== ffald_expected_prev[0] )
		&& ((ffald_expected_prev[0] !== last_ffald_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[0] = ffald_expected_prev[0];
	end
	if (
		( ffald_expected_prev[1] !== 1'bx ) && ( ffald_prev[1] !== ffald_expected_prev[1] )
		&& ((ffald_expected_prev[1] !== last_ffald_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[1] = ffald_expected_prev[1];
	end
	if (
		( ffald_expected_prev[2] !== 1'bx ) && ( ffald_prev[2] !== ffald_expected_prev[2] )
		&& ((ffald_expected_prev[2] !== last_ffald_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[2] = ffald_expected_prev[2];
	end
	if (
		( ffald_expected_prev[3] !== 1'bx ) && ( ffald_prev[3] !== ffald_expected_prev[3] )
		&& ((ffald_expected_prev[3] !== last_ffald_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[3] = ffald_expected_prev[3];
	end
	if (
		( ffald_expected_prev[4] !== 1'bx ) && ( ffald_prev[4] !== ffald_expected_prev[4] )
		&& ((ffald_expected_prev[4] !== last_ffald_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[4] = ffald_expected_prev[4];
	end
	if (
		( ffald_expected_prev[5] !== 1'bx ) && ( ffald_prev[5] !== ffald_expected_prev[5] )
		&& ((ffald_expected_prev[5] !== last_ffald_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[5] = ffald_expected_prev[5];
	end
	if (
		( ffald_expected_prev[6] !== 1'bx ) && ( ffald_prev[6] !== ffald_expected_prev[6] )
		&& ((ffald_expected_prev[6] !== last_ffald_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[6] = ffald_expected_prev[6];
	end
	if (
		( ffald_expected_prev[7] !== 1'bx ) && ( ffald_prev[7] !== ffald_expected_prev[7] )
		&& ((ffald_expected_prev[7] !== last_ffald_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[7] = ffald_expected_prev[7];
	end
	if (
		( ffald_expected_prev[8] !== 1'bx ) && ( ffald_prev[8] !== ffald_expected_prev[8] )
		&& ((ffald_expected_prev[8] !== last_ffald_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[8] = ffald_expected_prev[8];
	end
	if (
		( ffald_expected_prev[9] !== 1'bx ) && ( ffald_prev[9] !== ffald_expected_prev[9] )
		&& ((ffald_expected_prev[9] !== last_ffald_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[9] = ffald_expected_prev[9];
	end
	if (
		( ffald_expected_prev[10] !== 1'bx ) && ( ffald_prev[10] !== ffald_expected_prev[10] )
		&& ((ffald_expected_prev[10] !== last_ffald_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[10] = ffald_expected_prev[10];
	end
	if (
		( ffald_expected_prev[11] !== 1'bx ) && ( ffald_prev[11] !== ffald_expected_prev[11] )
		&& ((ffald_expected_prev[11] !== last_ffald_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[11] = ffald_expected_prev[11];
	end
	if (
		( ffald_expected_prev[12] !== 1'bx ) && ( ffald_prev[12] !== ffald_expected_prev[12] )
		&& ((ffald_expected_prev[12] !== last_ffald_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[12] = ffald_expected_prev[12];
	end
	if (
		( ffald_expected_prev[13] !== 1'bx ) && ( ffald_prev[13] !== ffald_expected_prev[13] )
		&& ((ffald_expected_prev[13] !== last_ffald_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[13] = ffald_expected_prev[13];
	end
	if (
		( ffald_expected_prev[14] !== 1'bx ) && ( ffald_prev[14] !== ffald_expected_prev[14] )
		&& ((ffald_expected_prev[14] !== last_ffald_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[14] = ffald_expected_prev[14];
	end
	if (
		( ffald_expected_prev[15] !== 1'bx ) && ( ffald_prev[15] !== ffald_expected_prev[15] )
		&& ((ffald_expected_prev[15] !== last_ffald_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ffald[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ffald_expected_prev);
		$display ("     Real value = %b", ffald_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ffald_exp[15] = ffald_expected_prev[15];
	end
	if (
		( saida_expected_prev[0] !== 1'bx ) && ( saida_prev[0] !== saida_expected_prev[0] )
		&& ((saida_expected_prev[0] !== last_saida_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[0] = saida_expected_prev[0];
	end
	if (
		( saida_expected_prev[1] !== 1'bx ) && ( saida_prev[1] !== saida_expected_prev[1] )
		&& ((saida_expected_prev[1] !== last_saida_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[1] = saida_expected_prev[1];
	end
	if (
		( saida_expected_prev[2] !== 1'bx ) && ( saida_prev[2] !== saida_expected_prev[2] )
		&& ((saida_expected_prev[2] !== last_saida_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[2] = saida_expected_prev[2];
	end
	if (
		( saida_expected_prev[3] !== 1'bx ) && ( saida_prev[3] !== saida_expected_prev[3] )
		&& ((saida_expected_prev[3] !== last_saida_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[3] = saida_expected_prev[3];
	end
	if (
		( saida_expected_prev[4] !== 1'bx ) && ( saida_prev[4] !== saida_expected_prev[4] )
		&& ((saida_expected_prev[4] !== last_saida_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[4] = saida_expected_prev[4];
	end
	if (
		( saida_expected_prev[5] !== 1'bx ) && ( saida_prev[5] !== saida_expected_prev[5] )
		&& ((saida_expected_prev[5] !== last_saida_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[5] = saida_expected_prev[5];
	end
	if (
		( saida_expected_prev[6] !== 1'bx ) && ( saida_prev[6] !== saida_expected_prev[6] )
		&& ((saida_expected_prev[6] !== last_saida_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[6] = saida_expected_prev[6];
	end
	if (
		( saida_expected_prev[7] !== 1'bx ) && ( saida_prev[7] !== saida_expected_prev[7] )
		&& ((saida_expected_prev[7] !== last_saida_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[7] = saida_expected_prev[7];
	end
	if (
		( saida_expected_prev[8] !== 1'bx ) && ( saida_prev[8] !== saida_expected_prev[8] )
		&& ((saida_expected_prev[8] !== last_saida_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[8] = saida_expected_prev[8];
	end
	if (
		( saida_expected_prev[9] !== 1'bx ) && ( saida_prev[9] !== saida_expected_prev[9] )
		&& ((saida_expected_prev[9] !== last_saida_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[9] = saida_expected_prev[9];
	end
	if (
		( saida_expected_prev[10] !== 1'bx ) && ( saida_prev[10] !== saida_expected_prev[10] )
		&& ((saida_expected_prev[10] !== last_saida_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[10] = saida_expected_prev[10];
	end
	if (
		( saida_expected_prev[11] !== 1'bx ) && ( saida_prev[11] !== saida_expected_prev[11] )
		&& ((saida_expected_prev[11] !== last_saida_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[11] = saida_expected_prev[11];
	end
	if (
		( saida_expected_prev[12] !== 1'bx ) && ( saida_prev[12] !== saida_expected_prev[12] )
		&& ((saida_expected_prev[12] !== last_saida_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[12] = saida_expected_prev[12];
	end
	if (
		( saida_expected_prev[13] !== 1'bx ) && ( saida_prev[13] !== saida_expected_prev[13] )
		&& ((saida_expected_prev[13] !== last_saida_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[13] = saida_expected_prev[13];
	end
	if (
		( saida_expected_prev[14] !== 1'bx ) && ( saida_prev[14] !== saida_expected_prev[14] )
		&& ((saida_expected_prev[14] !== last_saida_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[14] = saida_expected_prev[14];
	end
	if (
		( saida_expected_prev[15] !== 1'bx ) && ( saida_prev[15] !== saida_expected_prev[15] )
		&& ((saida_expected_prev[15] !== last_saida_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_expected_prev);
		$display ("     Real value = %b", saida_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_saida_exp[15] = saida_expected_prev[15];
	end
	if (
		( saidaResto_expected_prev[0] !== 1'bx ) && ( saidaResto_prev[0] !== saidaResto_expected_prev[0] )
		&& ((saidaResto_expected_prev[0] !== last_saidaResto_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[0] = saidaResto_expected_prev[0];
	end
	if (
		( saidaResto_expected_prev[1] !== 1'bx ) && ( saidaResto_prev[1] !== saidaResto_expected_prev[1] )
		&& ((saidaResto_expected_prev[1] !== last_saidaResto_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[1] = saidaResto_expected_prev[1];
	end
	if (
		( saidaResto_expected_prev[2] !== 1'bx ) && ( saidaResto_prev[2] !== saidaResto_expected_prev[2] )
		&& ((saidaResto_expected_prev[2] !== last_saidaResto_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[2] = saidaResto_expected_prev[2];
	end
	if (
		( saidaResto_expected_prev[3] !== 1'bx ) && ( saidaResto_prev[3] !== saidaResto_expected_prev[3] )
		&& ((saidaResto_expected_prev[3] !== last_saidaResto_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[3] = saidaResto_expected_prev[3];
	end
	if (
		( saidaResto_expected_prev[4] !== 1'bx ) && ( saidaResto_prev[4] !== saidaResto_expected_prev[4] )
		&& ((saidaResto_expected_prev[4] !== last_saidaResto_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[4] = saidaResto_expected_prev[4];
	end
	if (
		( saidaResto_expected_prev[5] !== 1'bx ) && ( saidaResto_prev[5] !== saidaResto_expected_prev[5] )
		&& ((saidaResto_expected_prev[5] !== last_saidaResto_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[5] = saidaResto_expected_prev[5];
	end
	if (
		( saidaResto_expected_prev[6] !== 1'bx ) && ( saidaResto_prev[6] !== saidaResto_expected_prev[6] )
		&& ((saidaResto_expected_prev[6] !== last_saidaResto_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[6] = saidaResto_expected_prev[6];
	end
	if (
		( saidaResto_expected_prev[7] !== 1'bx ) && ( saidaResto_prev[7] !== saidaResto_expected_prev[7] )
		&& ((saidaResto_expected_prev[7] !== last_saidaResto_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[7] = saidaResto_expected_prev[7];
	end
	if (
		( saidaResto_expected_prev[8] !== 1'bx ) && ( saidaResto_prev[8] !== saidaResto_expected_prev[8] )
		&& ((saidaResto_expected_prev[8] !== last_saidaResto_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[8] = saidaResto_expected_prev[8];
	end
	if (
		( saidaResto_expected_prev[9] !== 1'bx ) && ( saidaResto_prev[9] !== saidaResto_expected_prev[9] )
		&& ((saidaResto_expected_prev[9] !== last_saidaResto_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[9] = saidaResto_expected_prev[9];
	end
	if (
		( saidaResto_expected_prev[10] !== 1'bx ) && ( saidaResto_prev[10] !== saidaResto_expected_prev[10] )
		&& ((saidaResto_expected_prev[10] !== last_saidaResto_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[10] = saidaResto_expected_prev[10];
	end
	if (
		( saidaResto_expected_prev[11] !== 1'bx ) && ( saidaResto_prev[11] !== saidaResto_expected_prev[11] )
		&& ((saidaResto_expected_prev[11] !== last_saidaResto_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[11] = saidaResto_expected_prev[11];
	end
	if (
		( saidaResto_expected_prev[12] !== 1'bx ) && ( saidaResto_prev[12] !== saidaResto_expected_prev[12] )
		&& ((saidaResto_expected_prev[12] !== last_saidaResto_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[12] = saidaResto_expected_prev[12];
	end
	if (
		( saidaResto_expected_prev[13] !== 1'bx ) && ( saidaResto_prev[13] !== saidaResto_expected_prev[13] )
		&& ((saidaResto_expected_prev[13] !== last_saidaResto_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[13] = saidaResto_expected_prev[13];
	end
	if (
		( saidaResto_expected_prev[14] !== 1'bx ) && ( saidaResto_prev[14] !== saidaResto_expected_prev[14] )
		&& ((saidaResto_expected_prev[14] !== last_saidaResto_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[14] = saidaResto_expected_prev[14];
	end
	if (
		( saidaResto_expected_prev[15] !== 1'bx ) && ( saidaResto_prev[15] !== saidaResto_expected_prev[15] )
		&& ((saidaResto_expected_prev[15] !== last_saidaResto_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_saidaResto_exp[15] = saidaResto_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SISTEMA_FINAL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire [15:0] SaidaAlu;
wire [7:0] contador;
wire [15:0] ffald;
wire [15:0] saida;
wire [15:0] saidaResto;

wire sampler;                             

// assign statements (if any)                          
SISTEMA_FINAL i1 (
// port map - connection between master ports and signals/registers   
	.SaidaAlu(SaidaAlu),
	.clk(clk),
	.contador(contador),
	.ffald(ffald),
	.saida(saida),
	.saidaResto(saidaResto)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

SISTEMA_FINAL_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

SISTEMA_FINAL_vlg_check_tst tb_out(
	.SaidaAlu(SaidaAlu),
	.contador(contador),
	.ffald(ffald),
	.saida(saida),
	.saidaResto(saidaResto),
	.sampler_rx(sampler)
);
endmodule

