// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2018 11:21:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    regC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regC_vlg_sample_tst(
	EnC,
	clk,
	entrada,
	sampler_tx
);
input  EnC;
input  clk;
input [15:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(EnC or clk or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module regC_vlg_check_tst (
	FimC,
	saidaC,
	sampler_rx
);
input  FimC;
input [15:0] saidaC;
input sampler_rx;

reg  FimC_expected;
reg [15:0] saidaC_expected;

reg  FimC_prev;
reg [15:0] saidaC_prev;

reg  FimC_expected_prev;
reg [15:0] saidaC_expected_prev;

reg  last_FimC_exp;
reg [15:0] last_saidaC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	FimC_prev = FimC;
	saidaC_prev = saidaC;
end

// update expected /o prevs

always @(trigger)
begin
	FimC_expected_prev = FimC_expected;
	saidaC_expected_prev = saidaC_expected;
end



// expected FimC
initial
begin
	FimC_expected = 1'bX;
end 
// expected saidaC[ 15 ]
initial
begin
	saidaC_expected[15] = 1'bX;
end 
// expected saidaC[ 14 ]
initial
begin
	saidaC_expected[14] = 1'bX;
end 
// expected saidaC[ 13 ]
initial
begin
	saidaC_expected[13] = 1'bX;
end 
// expected saidaC[ 12 ]
initial
begin
	saidaC_expected[12] = 1'bX;
end 
// expected saidaC[ 11 ]
initial
begin
	saidaC_expected[11] = 1'bX;
end 
// expected saidaC[ 10 ]
initial
begin
	saidaC_expected[10] = 1'bX;
end 
// expected saidaC[ 9 ]
initial
begin
	saidaC_expected[9] = 1'bX;
end 
// expected saidaC[ 8 ]
initial
begin
	saidaC_expected[8] = 1'bX;
end 
// expected saidaC[ 7 ]
initial
begin
	saidaC_expected[7] = 1'bX;
end 
// expected saidaC[ 6 ]
initial
begin
	saidaC_expected[6] = 1'bX;
end 
// expected saidaC[ 5 ]
initial
begin
	saidaC_expected[5] = 1'bX;
end 
// expected saidaC[ 4 ]
initial
begin
	saidaC_expected[4] = 1'bX;
end 
// expected saidaC[ 3 ]
initial
begin
	saidaC_expected[3] = 1'bX;
end 
// expected saidaC[ 2 ]
initial
begin
	saidaC_expected[2] = 1'bX;
end 
// expected saidaC[ 1 ]
initial
begin
	saidaC_expected[1] = 1'bX;
end 
// expected saidaC[ 0 ]
initial
begin
	saidaC_expected[0] = 1'bX;
end 
// generate trigger
always @(FimC_expected or FimC or saidaC_expected or saidaC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FimC = %b | expected saidaC = %b | ",FimC_expected_prev,saidaC_expected_prev);
	$display("| real FimC = %b | real saidaC = %b | ",FimC_prev,saidaC_prev);
`endif
	if (
		( FimC_expected_prev !== 1'bx ) && ( FimC_prev !== FimC_expected_prev )
		&& ((FimC_expected_prev !== last_FimC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FimC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FimC_expected_prev);
		$display ("     Real value = %b", FimC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FimC_exp = FimC_expected_prev;
	end
	if (
		( saidaC_expected_prev[0] !== 1'bx ) && ( saidaC_prev[0] !== saidaC_expected_prev[0] )
		&& ((saidaC_expected_prev[0] !== last_saidaC_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[0] = saidaC_expected_prev[0];
	end
	if (
		( saidaC_expected_prev[1] !== 1'bx ) && ( saidaC_prev[1] !== saidaC_expected_prev[1] )
		&& ((saidaC_expected_prev[1] !== last_saidaC_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[1] = saidaC_expected_prev[1];
	end
	if (
		( saidaC_expected_prev[2] !== 1'bx ) && ( saidaC_prev[2] !== saidaC_expected_prev[2] )
		&& ((saidaC_expected_prev[2] !== last_saidaC_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[2] = saidaC_expected_prev[2];
	end
	if (
		( saidaC_expected_prev[3] !== 1'bx ) && ( saidaC_prev[3] !== saidaC_expected_prev[3] )
		&& ((saidaC_expected_prev[3] !== last_saidaC_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[3] = saidaC_expected_prev[3];
	end
	if (
		( saidaC_expected_prev[4] !== 1'bx ) && ( saidaC_prev[4] !== saidaC_expected_prev[4] )
		&& ((saidaC_expected_prev[4] !== last_saidaC_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[4] = saidaC_expected_prev[4];
	end
	if (
		( saidaC_expected_prev[5] !== 1'bx ) && ( saidaC_prev[5] !== saidaC_expected_prev[5] )
		&& ((saidaC_expected_prev[5] !== last_saidaC_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[5] = saidaC_expected_prev[5];
	end
	if (
		( saidaC_expected_prev[6] !== 1'bx ) && ( saidaC_prev[6] !== saidaC_expected_prev[6] )
		&& ((saidaC_expected_prev[6] !== last_saidaC_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[6] = saidaC_expected_prev[6];
	end
	if (
		( saidaC_expected_prev[7] !== 1'bx ) && ( saidaC_prev[7] !== saidaC_expected_prev[7] )
		&& ((saidaC_expected_prev[7] !== last_saidaC_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[7] = saidaC_expected_prev[7];
	end
	if (
		( saidaC_expected_prev[8] !== 1'bx ) && ( saidaC_prev[8] !== saidaC_expected_prev[8] )
		&& ((saidaC_expected_prev[8] !== last_saidaC_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[8] = saidaC_expected_prev[8];
	end
	if (
		( saidaC_expected_prev[9] !== 1'bx ) && ( saidaC_prev[9] !== saidaC_expected_prev[9] )
		&& ((saidaC_expected_prev[9] !== last_saidaC_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[9] = saidaC_expected_prev[9];
	end
	if (
		( saidaC_expected_prev[10] !== 1'bx ) && ( saidaC_prev[10] !== saidaC_expected_prev[10] )
		&& ((saidaC_expected_prev[10] !== last_saidaC_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[10] = saidaC_expected_prev[10];
	end
	if (
		( saidaC_expected_prev[11] !== 1'bx ) && ( saidaC_prev[11] !== saidaC_expected_prev[11] )
		&& ((saidaC_expected_prev[11] !== last_saidaC_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[11] = saidaC_expected_prev[11];
	end
	if (
		( saidaC_expected_prev[12] !== 1'bx ) && ( saidaC_prev[12] !== saidaC_expected_prev[12] )
		&& ((saidaC_expected_prev[12] !== last_saidaC_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[12] = saidaC_expected_prev[12];
	end
	if (
		( saidaC_expected_prev[13] !== 1'bx ) && ( saidaC_prev[13] !== saidaC_expected_prev[13] )
		&& ((saidaC_expected_prev[13] !== last_saidaC_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[13] = saidaC_expected_prev[13];
	end
	if (
		( saidaC_expected_prev[14] !== 1'bx ) && ( saidaC_prev[14] !== saidaC_expected_prev[14] )
		&& ((saidaC_expected_prev[14] !== last_saidaC_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[14] = saidaC_expected_prev[14];
	end
	if (
		( saidaC_expected_prev[15] !== 1'bx ) && ( saidaC_prev[15] !== saidaC_expected_prev[15] )
		&& ((saidaC_expected_prev[15] !== last_saidaC_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaC[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaC_expected_prev);
		$display ("     Real value = %b", saidaC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaC_exp[15] = saidaC_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module regC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EnC;
reg clk;
reg [15:0] entrada;
// wires                                               
wire FimC;
wire [15:0] saidaC;

wire sampler;                             

// assign statements (if any)                          
regC i1 (
// port map - connection between master ports and signals/registers   
	.EnC(EnC),
	.FimC(FimC),
	.clk(clk),
	.entrada(entrada),
	.saidaC(saidaC)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b1;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b1;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b1;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b1;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b1;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b1;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b1;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b1;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b1;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b1;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b1;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b1;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b1;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b1;
end 

// EnC
always
begin
	EnC = 1'b0;
	EnC = #500000 1'b1;
	#500000;
end 

regC_vlg_sample_tst tb_sample (
	.EnC(EnC),
	.clk(clk),
	.entrada(entrada),
	.sampler_tx(sampler)
);

regC_vlg_check_tst tb_out(
	.FimC(FimC),
	.saidaC(saidaC),
	.sampler_rx(sampler)
);
endmodule

