// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/04/2018 00:58:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AntiLoopD
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AntiLoopD_vlg_sample_tst(
	clk,
	enable,
	entrada,
	sampler_tx
);
input  clk;
input  enable;
input [15:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(clk or enable or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AntiLoopD_vlg_check_tst (
	saidaALD,
	sampler_rx
);
input [15:0] saidaALD;
input sampler_rx;

reg [15:0] saidaALD_expected;

reg [15:0] saidaALD_prev;

reg [15:0] saidaALD_expected_prev;

reg [15:0] last_saidaALD_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	saidaALD_prev = saidaALD;
end

// update expected /o prevs

always @(trigger)
begin
	saidaALD_expected_prev = saidaALD_expected;
end


// expected saidaALD[ 15 ]
initial
begin
	saidaALD_expected[15] = 1'bX;
end 
// expected saidaALD[ 14 ]
initial
begin
	saidaALD_expected[14] = 1'bX;
end 
// expected saidaALD[ 13 ]
initial
begin
	saidaALD_expected[13] = 1'bX;
end 
// expected saidaALD[ 12 ]
initial
begin
	saidaALD_expected[12] = 1'bX;
end 
// expected saidaALD[ 11 ]
initial
begin
	saidaALD_expected[11] = 1'bX;
end 
// expected saidaALD[ 10 ]
initial
begin
	saidaALD_expected[10] = 1'bX;
end 
// expected saidaALD[ 9 ]
initial
begin
	saidaALD_expected[9] = 1'bX;
end 
// expected saidaALD[ 8 ]
initial
begin
	saidaALD_expected[8] = 1'bX;
end 
// expected saidaALD[ 7 ]
initial
begin
	saidaALD_expected[7] = 1'bX;
end 
// expected saidaALD[ 6 ]
initial
begin
	saidaALD_expected[6] = 1'bX;
end 
// expected saidaALD[ 5 ]
initial
begin
	saidaALD_expected[5] = 1'bX;
end 
// expected saidaALD[ 4 ]
initial
begin
	saidaALD_expected[4] = 1'bX;
end 
// expected saidaALD[ 3 ]
initial
begin
	saidaALD_expected[3] = 1'bX;
end 
// expected saidaALD[ 2 ]
initial
begin
	saidaALD_expected[2] = 1'bX;
end 
// expected saidaALD[ 1 ]
initial
begin
	saidaALD_expected[1] = 1'bX;
end 
// expected saidaALD[ 0 ]
initial
begin
	saidaALD_expected[0] = 1'bX;
end 
// generate trigger
always @(saidaALD_expected or saidaALD)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected saidaALD = %b | ",saidaALD_expected_prev);
	$display("| real saidaALD = %b | ",saidaALD_prev);
`endif
	if (
		( saidaALD_expected_prev[0] !== 1'bx ) && ( saidaALD_prev[0] !== saidaALD_expected_prev[0] )
		&& ((saidaALD_expected_prev[0] !== last_saidaALD_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[0] = saidaALD_expected_prev[0];
	end
	if (
		( saidaALD_expected_prev[1] !== 1'bx ) && ( saidaALD_prev[1] !== saidaALD_expected_prev[1] )
		&& ((saidaALD_expected_prev[1] !== last_saidaALD_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[1] = saidaALD_expected_prev[1];
	end
	if (
		( saidaALD_expected_prev[2] !== 1'bx ) && ( saidaALD_prev[2] !== saidaALD_expected_prev[2] )
		&& ((saidaALD_expected_prev[2] !== last_saidaALD_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[2] = saidaALD_expected_prev[2];
	end
	if (
		( saidaALD_expected_prev[3] !== 1'bx ) && ( saidaALD_prev[3] !== saidaALD_expected_prev[3] )
		&& ((saidaALD_expected_prev[3] !== last_saidaALD_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[3] = saidaALD_expected_prev[3];
	end
	if (
		( saidaALD_expected_prev[4] !== 1'bx ) && ( saidaALD_prev[4] !== saidaALD_expected_prev[4] )
		&& ((saidaALD_expected_prev[4] !== last_saidaALD_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[4] = saidaALD_expected_prev[4];
	end
	if (
		( saidaALD_expected_prev[5] !== 1'bx ) && ( saidaALD_prev[5] !== saidaALD_expected_prev[5] )
		&& ((saidaALD_expected_prev[5] !== last_saidaALD_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[5] = saidaALD_expected_prev[5];
	end
	if (
		( saidaALD_expected_prev[6] !== 1'bx ) && ( saidaALD_prev[6] !== saidaALD_expected_prev[6] )
		&& ((saidaALD_expected_prev[6] !== last_saidaALD_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[6] = saidaALD_expected_prev[6];
	end
	if (
		( saidaALD_expected_prev[7] !== 1'bx ) && ( saidaALD_prev[7] !== saidaALD_expected_prev[7] )
		&& ((saidaALD_expected_prev[7] !== last_saidaALD_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[7] = saidaALD_expected_prev[7];
	end
	if (
		( saidaALD_expected_prev[8] !== 1'bx ) && ( saidaALD_prev[8] !== saidaALD_expected_prev[8] )
		&& ((saidaALD_expected_prev[8] !== last_saidaALD_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[8] = saidaALD_expected_prev[8];
	end
	if (
		( saidaALD_expected_prev[9] !== 1'bx ) && ( saidaALD_prev[9] !== saidaALD_expected_prev[9] )
		&& ((saidaALD_expected_prev[9] !== last_saidaALD_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[9] = saidaALD_expected_prev[9];
	end
	if (
		( saidaALD_expected_prev[10] !== 1'bx ) && ( saidaALD_prev[10] !== saidaALD_expected_prev[10] )
		&& ((saidaALD_expected_prev[10] !== last_saidaALD_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[10] = saidaALD_expected_prev[10];
	end
	if (
		( saidaALD_expected_prev[11] !== 1'bx ) && ( saidaALD_prev[11] !== saidaALD_expected_prev[11] )
		&& ((saidaALD_expected_prev[11] !== last_saidaALD_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[11] = saidaALD_expected_prev[11];
	end
	if (
		( saidaALD_expected_prev[12] !== 1'bx ) && ( saidaALD_prev[12] !== saidaALD_expected_prev[12] )
		&& ((saidaALD_expected_prev[12] !== last_saidaALD_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[12] = saidaALD_expected_prev[12];
	end
	if (
		( saidaALD_expected_prev[13] !== 1'bx ) && ( saidaALD_prev[13] !== saidaALD_expected_prev[13] )
		&& ((saidaALD_expected_prev[13] !== last_saidaALD_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[13] = saidaALD_expected_prev[13];
	end
	if (
		( saidaALD_expected_prev[14] !== 1'bx ) && ( saidaALD_prev[14] !== saidaALD_expected_prev[14] )
		&& ((saidaALD_expected_prev[14] !== last_saidaALD_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[14] = saidaALD_expected_prev[14];
	end
	if (
		( saidaALD_expected_prev[15] !== 1'bx ) && ( saidaALD_prev[15] !== saidaALD_expected_prev[15] )
		&& ((saidaALD_expected_prev[15] !== last_saidaALD_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaALD[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaALD_expected_prev);
		$display ("     Real value = %b", saidaALD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_saidaALD_exp[15] = saidaALD_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AntiLoopD_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg enable;
reg [15:0] entrada;
// wires                                               
wire [15:0] saidaALD;

wire sampler;                             

// assign statements (if any)                          
AntiLoopD i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.enable(enable),
	.entrada(entrada),
	.saidaALD(saidaALD)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #160000 1'b1;
	enable = #220000 1'b0;
	enable = #280000 1'b1;
	enable = #140000 1'b0;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b1;
	entrada[15] = #400000 1'b0;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b1;
	entrada[14] = #400000 1'b0;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b1;
	entrada[13] = #400000 1'b0;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b1;
	entrada[12] = #400000 1'b0;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b1;
	entrada[11] = #400000 1'b0;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b1;
	entrada[10] = #400000 1'b0;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b1;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b1;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b1;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b1;
	entrada[6] = #400000 1'b0;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b1;
	entrada[5] = #400000 1'b0;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b1;
	entrada[4] = #400000 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
	entrada[3] = #400000 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
	entrada[2] = #400000 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b1;
	entrada[1] = #400000 1'b0;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b1;
	entrada[0] = #400000 1'b0;
end 

AntiLoopD_vlg_sample_tst tb_sample (
	.clk(clk),
	.enable(enable),
	.entrada(entrada),
	.sampler_tx(sampler)
);

AntiLoopD_vlg_check_tst tb_out(
	.saidaALD(saidaALD),
	.sampler_rx(sampler)
);
endmodule

