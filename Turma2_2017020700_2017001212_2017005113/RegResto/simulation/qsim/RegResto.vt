// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/04/2018 01:05:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegResto
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegResto_vlg_sample_tst(
	EnResto,
	clk,
	entrada,
	resetResto,
	sampler_tx
);
input  EnResto;
input  clk;
input [15:0] entrada;
input  resetResto;
output sampler_tx;

reg sample;
time current_time;
always @(EnResto or clk or entrada or resetResto)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegResto_vlg_check_tst (
	FimResto,
	saidaResto,
	sampler_rx
);
input  FimResto;
input [15:0] saidaResto;
input sampler_rx;

reg  FimResto_expected;
reg [15:0] saidaResto_expected;

reg  FimResto_prev;
reg [15:0] saidaResto_prev;

reg  FimResto_expected_prev;
reg [15:0] saidaResto_expected_prev;

reg  last_FimResto_exp;
reg [15:0] last_saidaResto_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	FimResto_prev = FimResto;
	saidaResto_prev = saidaResto;
end

// update expected /o prevs

always @(trigger)
begin
	FimResto_expected_prev = FimResto_expected;
	saidaResto_expected_prev = saidaResto_expected;
end



// expected FimResto
initial
begin
	FimResto_expected = 1'bX;
end 
// expected saidaResto[ 15 ]
initial
begin
	saidaResto_expected[15] = 1'bX;
end 
// expected saidaResto[ 14 ]
initial
begin
	saidaResto_expected[14] = 1'bX;
end 
// expected saidaResto[ 13 ]
initial
begin
	saidaResto_expected[13] = 1'bX;
end 
// expected saidaResto[ 12 ]
initial
begin
	saidaResto_expected[12] = 1'bX;
end 
// expected saidaResto[ 11 ]
initial
begin
	saidaResto_expected[11] = 1'bX;
end 
// expected saidaResto[ 10 ]
initial
begin
	saidaResto_expected[10] = 1'bX;
end 
// expected saidaResto[ 9 ]
initial
begin
	saidaResto_expected[9] = 1'bX;
end 
// expected saidaResto[ 8 ]
initial
begin
	saidaResto_expected[8] = 1'bX;
end 
// expected saidaResto[ 7 ]
initial
begin
	saidaResto_expected[7] = 1'bX;
end 
// expected saidaResto[ 6 ]
initial
begin
	saidaResto_expected[6] = 1'bX;
end 
// expected saidaResto[ 5 ]
initial
begin
	saidaResto_expected[5] = 1'bX;
end 
// expected saidaResto[ 4 ]
initial
begin
	saidaResto_expected[4] = 1'bX;
end 
// expected saidaResto[ 3 ]
initial
begin
	saidaResto_expected[3] = 1'bX;
end 
// expected saidaResto[ 2 ]
initial
begin
	saidaResto_expected[2] = 1'bX;
end 
// expected saidaResto[ 1 ]
initial
begin
	saidaResto_expected[1] = 1'bX;
end 
// expected saidaResto[ 0 ]
initial
begin
	saidaResto_expected[0] = 1'bX;
end 
// generate trigger
always @(FimResto_expected or FimResto or saidaResto_expected or saidaResto)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FimResto = %b | expected saidaResto = %b | ",FimResto_expected_prev,saidaResto_expected_prev);
	$display("| real FimResto = %b | real saidaResto = %b | ",FimResto_prev,saidaResto_prev);
`endif
	if (
		( FimResto_expected_prev !== 1'bx ) && ( FimResto_prev !== FimResto_expected_prev )
		&& ((FimResto_expected_prev !== last_FimResto_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FimResto :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FimResto_expected_prev);
		$display ("     Real value = %b", FimResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FimResto_exp = FimResto_expected_prev;
	end
	if (
		( saidaResto_expected_prev[0] !== 1'bx ) && ( saidaResto_prev[0] !== saidaResto_expected_prev[0] )
		&& ((saidaResto_expected_prev[0] !== last_saidaResto_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[0] = saidaResto_expected_prev[0];
	end
	if (
		( saidaResto_expected_prev[1] !== 1'bx ) && ( saidaResto_prev[1] !== saidaResto_expected_prev[1] )
		&& ((saidaResto_expected_prev[1] !== last_saidaResto_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[1] = saidaResto_expected_prev[1];
	end
	if (
		( saidaResto_expected_prev[2] !== 1'bx ) && ( saidaResto_prev[2] !== saidaResto_expected_prev[2] )
		&& ((saidaResto_expected_prev[2] !== last_saidaResto_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[2] = saidaResto_expected_prev[2];
	end
	if (
		( saidaResto_expected_prev[3] !== 1'bx ) && ( saidaResto_prev[3] !== saidaResto_expected_prev[3] )
		&& ((saidaResto_expected_prev[3] !== last_saidaResto_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[3] = saidaResto_expected_prev[3];
	end
	if (
		( saidaResto_expected_prev[4] !== 1'bx ) && ( saidaResto_prev[4] !== saidaResto_expected_prev[4] )
		&& ((saidaResto_expected_prev[4] !== last_saidaResto_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[4] = saidaResto_expected_prev[4];
	end
	if (
		( saidaResto_expected_prev[5] !== 1'bx ) && ( saidaResto_prev[5] !== saidaResto_expected_prev[5] )
		&& ((saidaResto_expected_prev[5] !== last_saidaResto_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[5] = saidaResto_expected_prev[5];
	end
	if (
		( saidaResto_expected_prev[6] !== 1'bx ) && ( saidaResto_prev[6] !== saidaResto_expected_prev[6] )
		&& ((saidaResto_expected_prev[6] !== last_saidaResto_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[6] = saidaResto_expected_prev[6];
	end
	if (
		( saidaResto_expected_prev[7] !== 1'bx ) && ( saidaResto_prev[7] !== saidaResto_expected_prev[7] )
		&& ((saidaResto_expected_prev[7] !== last_saidaResto_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[7] = saidaResto_expected_prev[7];
	end
	if (
		( saidaResto_expected_prev[8] !== 1'bx ) && ( saidaResto_prev[8] !== saidaResto_expected_prev[8] )
		&& ((saidaResto_expected_prev[8] !== last_saidaResto_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[8] = saidaResto_expected_prev[8];
	end
	if (
		( saidaResto_expected_prev[9] !== 1'bx ) && ( saidaResto_prev[9] !== saidaResto_expected_prev[9] )
		&& ((saidaResto_expected_prev[9] !== last_saidaResto_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[9] = saidaResto_expected_prev[9];
	end
	if (
		( saidaResto_expected_prev[10] !== 1'bx ) && ( saidaResto_prev[10] !== saidaResto_expected_prev[10] )
		&& ((saidaResto_expected_prev[10] !== last_saidaResto_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[10] = saidaResto_expected_prev[10];
	end
	if (
		( saidaResto_expected_prev[11] !== 1'bx ) && ( saidaResto_prev[11] !== saidaResto_expected_prev[11] )
		&& ((saidaResto_expected_prev[11] !== last_saidaResto_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[11] = saidaResto_expected_prev[11];
	end
	if (
		( saidaResto_expected_prev[12] !== 1'bx ) && ( saidaResto_prev[12] !== saidaResto_expected_prev[12] )
		&& ((saidaResto_expected_prev[12] !== last_saidaResto_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[12] = saidaResto_expected_prev[12];
	end
	if (
		( saidaResto_expected_prev[13] !== 1'bx ) && ( saidaResto_prev[13] !== saidaResto_expected_prev[13] )
		&& ((saidaResto_expected_prev[13] !== last_saidaResto_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[13] = saidaResto_expected_prev[13];
	end
	if (
		( saidaResto_expected_prev[14] !== 1'bx ) && ( saidaResto_prev[14] !== saidaResto_expected_prev[14] )
		&& ((saidaResto_expected_prev[14] !== last_saidaResto_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[14] = saidaResto_expected_prev[14];
	end
	if (
		( saidaResto_expected_prev[15] !== 1'bx ) && ( saidaResto_prev[15] !== saidaResto_expected_prev[15] )
		&& ((saidaResto_expected_prev[15] !== last_saidaResto_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaResto[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaResto_expected_prev);
		$display ("     Real value = %b", saidaResto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaResto_exp[15] = saidaResto_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegResto_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EnResto;
reg clk;
reg [15:0] entrada;
reg resetResto;
// wires                                               
wire FimResto;
wire [15:0] saidaResto;

wire sampler;                             

// assign statements (if any)                          
RegResto i1 (
// port map - connection between master ports and signals/registers   
	.EnResto(EnResto),
	.FimResto(FimResto),
	.clk(clk),
	.entrada(entrada),
	.resetResto(resetResto),
	.saidaResto(saidaResto)
);

// EnResto
initial
begin
	EnResto = 1'b0;
	EnResto = #60000 1'b1;
	EnResto = #100000 1'b0;
end 

// resetResto
initial
begin
	resetResto = 1'b0;
	resetResto = #560000 1'b1;
	resetResto = #100000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// entrada[ 15 ]
initial
begin
	entrada[15] = 1'b1;
end 
// entrada[ 14 ]
initial
begin
	entrada[14] = 1'b1;
end 
// entrada[ 13 ]
initial
begin
	entrada[13] = 1'b1;
end 
// entrada[ 12 ]
initial
begin
	entrada[12] = 1'b1;
end 
// entrada[ 11 ]
initial
begin
	entrada[11] = 1'b1;
end 
// entrada[ 10 ]
initial
begin
	entrada[10] = 1'b1;
end 
// entrada[ 9 ]
initial
begin
	entrada[9] = 1'b1;
end 
// entrada[ 8 ]
initial
begin
	entrada[8] = 1'b1;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b1;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b1;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b1;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b1;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b1;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b1;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b1;
end 

RegResto_vlg_sample_tst tb_sample (
	.EnResto(EnResto),
	.clk(clk),
	.entrada(entrada),
	.resetResto(resetResto),
	.sampler_tx(sampler)
);

RegResto_vlg_check_tst tb_out(
	.FimResto(FimResto),
	.saidaResto(saidaResto),
	.sampler_rx(sampler)
);
endmodule

