// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2018 11:18:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    regA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module regA_vlg_sample_tst(
	EnA,
	clk,
	entrada,
	sampler_tx
);
input  EnA;
input  clk;
input [7:0] entrada;
output sampler_tx;

reg sample;
time current_time;
always @(EnA or clk or entrada)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module regA_vlg_check_tst (
	FimA,
	saidaA,
	sampler_rx
);
input  FimA;
input [15:0] saidaA;
input sampler_rx;

reg  FimA_expected;
reg [15:0] saidaA_expected;

reg  FimA_prev;
reg [15:0] saidaA_prev;

reg  FimA_expected_prev;
reg [15:0] saidaA_expected_prev;

reg  last_FimA_exp;
reg [15:0] last_saidaA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	FimA_prev = FimA;
	saidaA_prev = saidaA;
end

// update expected /o prevs

always @(trigger)
begin
	FimA_expected_prev = FimA_expected;
	saidaA_expected_prev = saidaA_expected;
end



// expected FimA
initial
begin
	FimA_expected = 1'bX;
end 
// expected saidaA[ 15 ]
initial
begin
	saidaA_expected[15] = 1'bX;
end 
// expected saidaA[ 14 ]
initial
begin
	saidaA_expected[14] = 1'bX;
end 
// expected saidaA[ 13 ]
initial
begin
	saidaA_expected[13] = 1'bX;
end 
// expected saidaA[ 12 ]
initial
begin
	saidaA_expected[12] = 1'bX;
end 
// expected saidaA[ 11 ]
initial
begin
	saidaA_expected[11] = 1'bX;
end 
// expected saidaA[ 10 ]
initial
begin
	saidaA_expected[10] = 1'bX;
end 
// expected saidaA[ 9 ]
initial
begin
	saidaA_expected[9] = 1'bX;
end 
// expected saidaA[ 8 ]
initial
begin
	saidaA_expected[8] = 1'bX;
end 
// expected saidaA[ 7 ]
initial
begin
	saidaA_expected[7] = 1'bX;
end 
// expected saidaA[ 6 ]
initial
begin
	saidaA_expected[6] = 1'bX;
end 
// expected saidaA[ 5 ]
initial
begin
	saidaA_expected[5] = 1'bX;
end 
// expected saidaA[ 4 ]
initial
begin
	saidaA_expected[4] = 1'bX;
end 
// expected saidaA[ 3 ]
initial
begin
	saidaA_expected[3] = 1'bX;
end 
// expected saidaA[ 2 ]
initial
begin
	saidaA_expected[2] = 1'bX;
end 
// expected saidaA[ 1 ]
initial
begin
	saidaA_expected[1] = 1'bX;
end 
// expected saidaA[ 0 ]
initial
begin
	saidaA_expected[0] = 1'bX;
end 
// generate trigger
always @(FimA_expected or FimA or saidaA_expected or saidaA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected FimA = %b | expected saidaA = %b | ",FimA_expected_prev,saidaA_expected_prev);
	$display("| real FimA = %b | real saidaA = %b | ",FimA_prev,saidaA_prev);
`endif
	if (
		( FimA_expected_prev !== 1'bx ) && ( FimA_prev !== FimA_expected_prev )
		&& ((FimA_expected_prev !== last_FimA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FimA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FimA_expected_prev);
		$display ("     Real value = %b", FimA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_FimA_exp = FimA_expected_prev;
	end
	if (
		( saidaA_expected_prev[0] !== 1'bx ) && ( saidaA_prev[0] !== saidaA_expected_prev[0] )
		&& ((saidaA_expected_prev[0] !== last_saidaA_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[0] = saidaA_expected_prev[0];
	end
	if (
		( saidaA_expected_prev[1] !== 1'bx ) && ( saidaA_prev[1] !== saidaA_expected_prev[1] )
		&& ((saidaA_expected_prev[1] !== last_saidaA_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[1] = saidaA_expected_prev[1];
	end
	if (
		( saidaA_expected_prev[2] !== 1'bx ) && ( saidaA_prev[2] !== saidaA_expected_prev[2] )
		&& ((saidaA_expected_prev[2] !== last_saidaA_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[2] = saidaA_expected_prev[2];
	end
	if (
		( saidaA_expected_prev[3] !== 1'bx ) && ( saidaA_prev[3] !== saidaA_expected_prev[3] )
		&& ((saidaA_expected_prev[3] !== last_saidaA_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[3] = saidaA_expected_prev[3];
	end
	if (
		( saidaA_expected_prev[4] !== 1'bx ) && ( saidaA_prev[4] !== saidaA_expected_prev[4] )
		&& ((saidaA_expected_prev[4] !== last_saidaA_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[4] = saidaA_expected_prev[4];
	end
	if (
		( saidaA_expected_prev[5] !== 1'bx ) && ( saidaA_prev[5] !== saidaA_expected_prev[5] )
		&& ((saidaA_expected_prev[5] !== last_saidaA_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[5] = saidaA_expected_prev[5];
	end
	if (
		( saidaA_expected_prev[6] !== 1'bx ) && ( saidaA_prev[6] !== saidaA_expected_prev[6] )
		&& ((saidaA_expected_prev[6] !== last_saidaA_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[6] = saidaA_expected_prev[6];
	end
	if (
		( saidaA_expected_prev[7] !== 1'bx ) && ( saidaA_prev[7] !== saidaA_expected_prev[7] )
		&& ((saidaA_expected_prev[7] !== last_saidaA_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[7] = saidaA_expected_prev[7];
	end
	if (
		( saidaA_expected_prev[8] !== 1'bx ) && ( saidaA_prev[8] !== saidaA_expected_prev[8] )
		&& ((saidaA_expected_prev[8] !== last_saidaA_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[8] = saidaA_expected_prev[8];
	end
	if (
		( saidaA_expected_prev[9] !== 1'bx ) && ( saidaA_prev[9] !== saidaA_expected_prev[9] )
		&& ((saidaA_expected_prev[9] !== last_saidaA_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[9] = saidaA_expected_prev[9];
	end
	if (
		( saidaA_expected_prev[10] !== 1'bx ) && ( saidaA_prev[10] !== saidaA_expected_prev[10] )
		&& ((saidaA_expected_prev[10] !== last_saidaA_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[10] = saidaA_expected_prev[10];
	end
	if (
		( saidaA_expected_prev[11] !== 1'bx ) && ( saidaA_prev[11] !== saidaA_expected_prev[11] )
		&& ((saidaA_expected_prev[11] !== last_saidaA_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[11] = saidaA_expected_prev[11];
	end
	if (
		( saidaA_expected_prev[12] !== 1'bx ) && ( saidaA_prev[12] !== saidaA_expected_prev[12] )
		&& ((saidaA_expected_prev[12] !== last_saidaA_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[12] = saidaA_expected_prev[12];
	end
	if (
		( saidaA_expected_prev[13] !== 1'bx ) && ( saidaA_prev[13] !== saidaA_expected_prev[13] )
		&& ((saidaA_expected_prev[13] !== last_saidaA_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[13] = saidaA_expected_prev[13];
	end
	if (
		( saidaA_expected_prev[14] !== 1'bx ) && ( saidaA_prev[14] !== saidaA_expected_prev[14] )
		&& ((saidaA_expected_prev[14] !== last_saidaA_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[14] = saidaA_expected_prev[14];
	end
	if (
		( saidaA_expected_prev[15] !== 1'bx ) && ( saidaA_prev[15] !== saidaA_expected_prev[15] )
		&& ((saidaA_expected_prev[15] !== last_saidaA_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saidaA[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saidaA_expected_prev);
		$display ("     Real value = %b", saidaA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_saidaA_exp[15] = saidaA_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module regA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg EnA;
reg clk;
reg [7:0] entrada;
// wires                                               
wire FimA;
wire [15:0] saidaA;

wire sampler;                             

// assign statements (if any)                          
regA i1 (
// port map - connection between master ports and signals/registers   
	.EnA(EnA),
	.FimA(FimA),
	.clk(clk),
	.entrada(entrada),
	.saidaA(saidaA)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// EnA
always
begin
	EnA = 1'b0;
	EnA = #250000 1'b1;
	#250000;
end 
// entrada[ 7 ]
initial
begin
	entrada[7] = 1'b0;
	entrada[7] = #120000 1'b1;
	entrada[7] = #120000 1'b0;
end 
// entrada[ 6 ]
initial
begin
	entrada[6] = 1'b1;
	entrada[6] = #240000 1'b0;
	entrada[6] = #560000 1'b1;
end 
// entrada[ 5 ]
initial
begin
	entrada[5] = 1'b1;
	entrada[5] = #120000 1'b0;
	entrada[5] = #120000 1'b1;
	entrada[5] = #140000 1'b0;
	entrada[5] = #420000 1'b1;
end 
// entrada[ 4 ]
initial
begin
	entrada[4] = 1'b0;
	entrada[4] = #520000 1'b1;
	entrada[4] = #280000 1'b0;
end 
// entrada[ 3 ]
initial
begin
	entrada[3] = 1'b0;
	entrada[3] = #120000 1'b1;
	entrada[3] = #260000 1'b0;
end 
// entrada[ 2 ]
initial
begin
	entrada[2] = 1'b1;
	entrada[2] = #120000 1'b0;
	entrada[2] = #120000 1'b1;
	entrada[2] = #140000 1'b0;
	entrada[2] = #140000 1'b1;
	entrada[2] = #280000 1'b0;
end 
// entrada[ 1 ]
initial
begin
	entrada[1] = 1'b0;
	entrada[1] = #380000 1'b1;
	entrada[1] = #140000 1'b0;
	entrada[1] = #280000 1'b1;
end 
// entrada[ 0 ]
initial
begin
	entrada[0] = 1'b0;
	entrada[0] = #380000 1'b1;
	entrada[0] = #140000 1'b0;
	entrada[0] = #280000 1'b1;
end 

regA_vlg_sample_tst tb_sample (
	.EnA(EnA),
	.clk(clk),
	.entrada(entrada),
	.sampler_tx(sampler)
);

regA_vlg_check_tst tb_out(
	.FimA(FimA),
	.saidaA(saidaA),
	.sampler_rx(sampler)
);
endmodule

