module Controle(clk, FimA, FimB, FimC, B, Endereco, EnA, EnB, EnC, Op, SEL, contador); //contador beta
input FimA, FimB, FimC, clk;
input [7:0] B;
output reg [8:0] Endereco;
output reg EnA, EnB, EnC, Op, SEL;
output reg [7:0] contador; //beta

reg multp;
reg [2:0] state, next_state;
localparam s1=3'd0, s2=3'd1, s3=3'd2, s4=3'd3, s5=3'd4;

always @(*)
	case(state)
		s1: next_state<=s2;
		s2: next_state<=s3;
		s3: next_state<=s4;
		s4: next_state<=s5;
		default: next_state<=s1;
	endcase
	
always @(negedge clk) begin
	if(FimA) begin
		case(state)
			s1: Endereco<=9'd0;
			s2: Endereco<=9'd2;
			s3: Endereco<=9'd4;
			s4: Endereco<=9'd6;
			default: Endereco<=9'd8;
		endcase
		EnA<=1'b0;
		EnB<=1'b1;
	end else
	
	if(FimB || multp) begin
		if(SEL==1'b0) begin
			EnB<=1'b0;
			EnC<=1'b1;
		end else begin
			if(multp==1'b0) begin 
				if(B!=1'b0) begin contador<=B; multp<=1'b1; EnB<=1'b0; end
					else begin EnB<=1'b0; EnC<=1'b1; end
			end
				else begin
					contador <= contador - 8'b1; 
					if(contador<8'd2) begin
					multp<=1'b0;
					EnB<=1'b0;
					EnC<=1'b1;
				end
			end
		end
	end else
	
	if(FimC) begin
		case(state)
			s1: begin Op<=1'b0; SEL<=1'b0; Endereco<=9'd1; end
			s2: begin Op<=1'b1; SEL<=1'b0; Endereco<=9'd3; end
			s3: begin Op<=1'b0; SEL<=1'b0; Endereco<=9'd5; end
			s4: begin Op<=1'b1; SEL<=1'b1; Endereco<=9'd7; end
			default: begin Op<=1'b1; SEL<=1'b0; Endereco<=9'd9; end
		endcase
		
		EnA<=1'b1;
		EnC<=1'b0;
		state<=next_state;
		
	end else begin
		state<=s1;
		EnC<=1'b1;
		multp<=1'b0;
	end
end

endmodule
